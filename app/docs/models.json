[
    {
      "title": "ChatGPT",
      "install": "pip install openai or npm install openai",
      "pythonCode": "import openai\n\n# Replace with your OpenAI API key\napi_key = \"your-api-key\"\n\ndef get_ai_response(prompt):\n    try:\n        response = openai.ChatCompletion.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[{\"role\": \"user\", \"content\": prompt}],\n            api_key=api_key  # Pass the API key directly\n        )\n        return response[\"choices\"][0][\"message\"][\"content\"]\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Example usage\nuser_input = input(\"Enter your prompt: \")\nai_response = get_ai_response(user_input)\nprint(\"AI Response:\", ai_response)",
      "nodejsCode": "const { OpenAI } = require(\"openai\");\n\n// Replace with your OpenAI API key\nconst openai = new OpenAI({\n    apiKey: \"your-api-key\",  // Ensure you keep this secret\n});\n\nasync function getAIResponse(prompt) {\n    try {\n        const response = await openai.chat.completions.create({\n            model: \"gpt-3.5-turbo\",\n            messages: [{ role: \"user\", content: prompt }],\n        });\n\n        console.log(\"AI Response:\", response.choices[0].message.content);\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n}\n\nconst userInput = \"Hello, how can AI help me today?\";\ngetAIResponse(userInput);",
      "apiKeyUrl": "https://openai.com/api/"
    },
    {
      "title": "Gemini",
      "install": "pip install google-generativeai or npm install @google/generative-ai",
      "pythonCode": "import google.generativeai as genai\n\n# Replace with your API key\ngenai.configure(api_key=\"your-api-key\")\n\ndef get_gemini_response(prompt):\n    try:\n        model = genai.GenerativeModel(\"gemini-pro\")\n        response = model.generate_content(prompt)\n        return response.text\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# Example usage\nuser_input = input(\"Enter your prompt: \")\nai_response = get_gemini_response(user_input)\nprint(\"AI Response:\", ai_response)",
      "nodejsCode": "const { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n\n// Replace with your API key\nconst genAI = new GoogleGenerativeAI(\"your-api-key\");\n\nasync function getGeminiResponse(prompt) {\n    try {\n        const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n        const result = await model.generateContent(prompt);\n        console.log(\"AI Response:\", result.response.text);\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n}\n\nconst userInput = \"Hello, how can AI help me today?\";\ngetGeminiResponse(userInput);",
      "apiKeyUrl": "https://console.cloud.google.com/apis/credentials"
    },
    {
      "title": "Ollama",
      "install": "pip install ollama or npm install ollama",
      "pythonCode": "import ollama\n\nresponse = ollama.chat(model='llama2', messages=[\n  {\n    'role': 'user',\n    'content': 'Why is the sky blue?',\n  },\n])\n\nprint(response['message']['content'])",
      "nodejsCode": "import ollama from 'ollama';\n\nconst response = await ollama.chat({\n  model: 'llama2',\n  messages: [{ role: 'user', content: 'Why is the sky blue?' }],\n});\n\nconsole.log(response.message.content);",
      "apiKeyUrl": "https://ollama.ai/account/api-keys"
    },
    {
      "title": "Groq",
      "install": "pip install groq-sdk or npm install groq-sdk",
      "pythonCode": "import os\n\nfrom groq import Groq\n\nclient = Groq(\n    # This is the default and can be omitted\n    api_key=os.environ.get('GROQ_API_KEY'),\n)\n\nchat_completion = client.chat.completions.create(\n    messages=[\n        {\n            'role': 'system',\n            'content': 'you are a helpful assistant.'\n        },\n        {\n            'role': 'user',\n            'content': 'Explain the importance of fast language models',\n        }\n    ],\n    model='llama-3.3-70b-versatile',\n)\n\nprint(chat_completion.choices[0].message.content)",
      "nodejsCode": "const Groq = require('groq-sdk');\n\nconst client = new Groq({\n  apiKey: process.env.GROQ_API_KEY,\n});\n\nasync function main() {\n  const completion = await client.chat.completions.create({\n    messages: [\n      { role: 'system', content: 'you are a helpful assistant.' },\n      { role: 'user', content: 'Explain the importance of fast language models' },\n    ],\n    model: 'llama-3.3-70b-versatile',\n  });\n\n  console.log(completion.choices[0].message.content);\n}\n\nmain();",
      "apiKeyUrl": "https://api.groq.com/account/api-keys"
    },
    {
      "title": "DeepSeek",
      "install": "pip install openai or npm install openai",
      "pythonCode": "# Please install OpenAI SDK first: `pip install openai`\n\nfrom openai import OpenAI\n\nclient = OpenAI(api_key='<DeepSeek API Key>', base_url='https://api.deepseek.com')\n\nresponse = client.chat.completions.create(\n    model='deepseek-chat',\n    messages=[\n        {'role': 'system', 'content': 'You are a helpful assistant'},\n        {'role': 'user', 'content': 'Hello'},\n    ],\n    stream=False\n)\n\nprint(response.choices[0].message.content)",
      "nodejsCode": "// Please install OpenAI SDK first: `npm install openai`\n\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  baseURL: 'https://api.deepseek.com',\n  apiKey: '<DeepSeek API Key>'\n});\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: 'system', content: 'You are a helpful assistant.' }],\n    model: 'deepseek-chat',\n  });\n\n  console.log(completion.choices[0].message.content);\n}\n\nmain();",
      "apiKeyUrl": "https://api.deepseek.com/account/api-keys"
    },
    {
      "title": "Claude",
      "install": "pip install requests or npm install axios",
      "pythonCode": "import requests\n\nurl = 'https://api.anthropic.com/v1/your-endpoint'\nheaders = {\n    'Authorization': 'Bearer YOUR_API_KEY',\n    'Content-Type': 'application/json'\n}\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())",
      "nodejsCode": "const axios = require('axios');\n\nconst url = 'https://api.anthropic.com/v1/your-endpoint';\nconst headers = {\n    'Authorization': 'Bearer YOUR_API_KEY',\n    'Content-Type': 'application/json'\n};\n\naxios.get(url, { headers })\n    .then(response => {\n        console.log(response.data);\n    })\n    .catch(error => {\n        console.error('Error fetching data:', error);\n    });",
      "apiKeyUrl": "https://claude.ai/login?returnTo=%2F%3F"
    }
  ]
  